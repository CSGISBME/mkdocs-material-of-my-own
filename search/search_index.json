{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome\uff01\u8fd9\u662f\u6211\u7684\u8d5b\u535a\u65e5\u8bb0\u672c+\u7b14\u8bb0\u672c","text":"<ul> <li> <p>\u6d59\u6c5f\u5927\u5b6624\u7ea7CS</p> </li> <li> <p>\u7231\u597d\u592a\u5c11\u4e86\u545c\u545c\u545c\uff0c\u5f39\u7434\u7b97\u662f\u552f\u4e00\u4e00\u4e2a</p> </li> <li> <p>\u53eb\u4ec0\u4e48\uff1f \u4e0d\u544a\u8bc9\u4f60</p> </li> <li> <p>\u6211\u662f\u8c01\uff1f \u6211\u4e5f\u4e0d\u77e5\u9053</p> </li> </ul>"},{"location":"To-do/","title":"To do","text":"<p>\u5199to-do list\u7684</p>"},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/","title":"Chap 3 \u94fe\u8868\u3001\u6808\u3001\u961f\u5217","text":""},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/#the-list-adt","title":"The List ADT","text":"<pre><code>typedef struct Node* Nodeptr;\nstruct Node{\n    int element;\n    Nodeptr next;\n};\n//\u7533\u8bf7\u5185\u5b58\nNodeptr head=(Nodeptr)malloc(sizeof(struct Node*))\n</code></pre>"},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/#cursor-implementation-of-linked-lists","title":"Cursor Implementation of linked lists","text":""},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/#the-stack-adt","title":"The Stack ADT","text":""},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/#_1","title":"\u7528\u6570\u5217\u5b9e\u73b0\u6808","text":"<pre><code>struct StackRecord{\n    int capacity;\n    int TopofStack;\n    ElementType* Array;\n};\n</code></pre> <ul> <li>push\u3001pop\u4e4b\u524d\u5fc5\u987b\u8981\u68c0\u67e5\u662f\u4e0d\u662f\u5408\u6cd5\u64cd\u4f5c\uff0c\u7a7a\u7684\u4e0d\u80fdpop\uff0c\u6ee1\u7684\u4e0d\u80fdpush</li> </ul>"},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/#_2","title":"\u7528\u94fe\u8868\u5b9e\u73b0\u6808","text":""},{"location":"FDS/chap_3_%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/#the-queue-adt-fifo","title":"The Queue ADT (FIFO)","text":"<p>\u5b9a\u4e49\uff1a \u9650\u5b9a\u5728\u4e00\u7aef\u63d2\u5165\uff08\u961f\u5c3e\uff09\uff0c\u4e00\u7aef\u5220\u9664\uff08\u961f\u5934\uff09\u7684\u7279\u6b8a\u7ebf\u6027\u8868</p> <p>rear \u6307\u5411\u5b9e\u9645\u961f\u5c3e\u7684\u5143\u7d20\u6240\u5728\u7684\u4f4d\u7f6e\uff0cfront\u6307\u5411\u5b9e\u9645\u961f\u5934\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e</p> <p><code>\u961f\u5217\u4e2a\u6570= tail-head</code></p> <pre><code>struct queuerecord{\n    int capacity;\n    int front;\n    int rear;\n    int size;\n    Elementtype *array;\n};\n</code></pre> <p>Operations:</p> <ul> <li>int isempty(Queue Q);</li> <li>Queue CreateQueue(void);</li> <li>void DisposeQueue(Queue Q);</li> <li>void makeemprt(Queue Q);</li> <li>void enqueue(elementtype x,Queue Q);</li> <li></li> </ul> <p>circular queue(\u5faa\u73af\u961f\u5217)\uff1a</p> <p>\u4e00\u6837\u5730\uff0c\u6211\u4eec\u89c4\u5b9a\uff1a head\u6307\u5411\u5bf9\u5934\u524d\u4e00\u4e2a\uff0ctail\u6307\u5411\u961f\u5c3e</p> <ul> <li>FIFO</li> <li>\u5faa\u73af\u4f7f\u7528\u7a7a\u95f4</li> </ul> <p>\u200b   operations</p> <ul> <li>enqueue: </li> <li>dequeue: </li> </ul>"},{"location":"FDS/chap_4_%E6%A0%91/","title":"Chap 4 \u6811","text":""},{"location":"FDS/chap_4_%E6%A0%91/#_1","title":"\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"FDS/chap_4_%E6%A0%91/#_2","title":"\u6811\u7684\u5b9e\u73b0","text":"<ul> <li>\u4efb\u610f\u7684\u6811</li> </ul> <pre><code>struct TreeNode{\n  int element;\n  struct TreeNode* firstchild;\n  struct TreeNode* nextsibling;\n}\n</code></pre> <ul> <li>\u4e8c\u53c9\u6811</li> </ul> <pre><code>struct TreeNode{\n  int element;\n  struct TreeNode* lchild;\n  struct TreeNode* rchild;\n};\n</code></pre> <p>\u4e8c\u53c9\u6811\u53ef\u4ee5\u548c\u4efb\u4f55\u6811\u76f8\u4e92\u8f6c\u5316\uff0c\u8f6c\u5316\u540e\u8fde\u63a5\u7684\u987a\u5e8f\u4e0d\u53d8\uff0cparent\u548csibling\u7684\u5173\u7cfb\u4f1a\u6539\u53d8</p>"},{"location":"FDS/chap_4_%E6%A0%91/#_3","title":"\u6811\u7684\u904d\u5386","text":"<ul> <li><code>preorder</code>: \u6839\u5de6\u53f3</li> <li><code>inorder</code>: \u5de6\u6839\u53f3</li> <li><code>postorder</code>:\u5de6\u53f3\u6839</li> <li><code>levelorder</code>:\u6bcf\u4e00\u5c42\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u7b2c\u4e00\u5c42\u5230\u6700\u540e\u4e00\u5c42</li> </ul>"},{"location":"FDS/chap_4_%E6%A0%91/#threaded-binary-trees","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811\uff08Threaded binary trees\uff09","text":"<p>\u7ebf\u7d22\uff1a \u6307\u5411\u7ed3\u70b9\u524d\u9a71\u3001\u540e\u7ee7\u7684\u6307\u9488</p> <pre><code>typedef struct TBNode{\n      char data;\n    int LTag,Rtag;//LTag=0 \u6307\u5411\u5de6\u5b69\u5b50 LTag=1 \u6307\u5411\u524d\u9a71\n    struct TBNode* lchild;\n    struct TBNode* rchild;\n}TBNode;\n</code></pre> <p>\u82e5\u5de6\u6307\u9488\u4e3a\u7a7a\uff0c\u5de6\u6307\u9488\u6307\u5411\u524d\u9a71\uff1b\u82e5\u53f3\u6307\u9488\u4e3a\u7a7a\uff0c\u53f3\u6307\u9488\u6307\u5411\u540e\u9a71\uff1b</p> <p>\u6709\u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u3001\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811</p> <pre><code>//\u4ee5\u4e2d\u5e8f\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\u7b97\u6cd5\n</code></pre>"},{"location":"FDS/chap_4_%E6%A0%91/#_4","title":"\u7ecf\u5178\u9898\u578b","text":"<p><code>\u7ed9\u5b9a\u524d\u5e8f\u4e2d\u5e8f\u627e</code></p>"},{"location":"FDS/chap_4_%E6%A0%91/#bstbinary-search-tree","title":"BST(binary search tree)","text":""},{"location":"FDS/chap_4_%E6%A0%91/#_5","title":"\u5b9a\u4e49","text":"<p>1.\u662f\u4e8c\u53c9\u6811</p> <p>2.\u5de6\u5b69\u5b50&lt; \u6839&lt; \u53f3\u5b69\u5b50</p> <p>3.\u5de6\u53f3\u5b50\u6811\u90fd\u662fBST</p>"},{"location":"FDS/chap_4_%E6%A0%91/#_6","title":"\u64cd\u4f5c","text":""},{"location":"FDS/chap_4_%E6%A0%91/#_7","title":"\u5bfb\u627e","text":"<pre><code>//\u9012\u5f52\u6cd5\nPosition Find(ElementType X,SearchTree T){\n    if(T==NULL){\n        return NULL;\n    if(X&lt;T-&gt;Left){\n        return Find(X,T-&gt;Left);\n    }else if(x&gt;T-&gt;Right){\n        return Find(X,T-&gt;Right);\n    }else{\n        return T;\n    }\n}\n//\u5faa\u73af\u6cd5\nPosition Find(ElementType X,SearchTree T){\n    while(T){\n        if(X==T-&gt;Element){\n            return T;\n        }else if(X&lt;T-&gt;Element){\n          T=T-&gt;Left;\n        }else{\n            T=T-&gt;right;\n        }\n    }\n    return NULL;\n}\n</code></pre>"},{"location":"FDS/chap_4_%E6%A0%91/#_8","title":"\u627e\u6700\u5c0f","text":"<pre><code>Position FindMin(SearchTree T){\n  if(T==NULL){\n    return T;\n  }else{\n   if(T-&gt;left==NULL){\n    return T;\n  }else{\n    return FindMin(T-&gt;left)\n  }\n  }\n}\n</code></pre>"},{"location":"FDS/chap_4_%E6%A0%91/#_9","title":"\u627e\u6700\u5927","text":"<pre><code>Position FindMax(SearchTree T){\n    if(T==NULL)\n        while(T-&gt;Right!=NULL){\n                T=T-&gt;Right;\n        }\n    return T;\n}\n</code></pre>"},{"location":"FDS/chap_4_%E6%A0%91/#_10","title":"\u63d2\u5165","text":"<pre><code>SearchTree  Insert( ElementType X, SearchTree T ) \n{ \n    if ( T == NULL ) { /*\u4f20\u5165\u7684\u662f\u7a7a\u7ed3\u70b9\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4f4d\u7f6e\uff0c\u6216\u8005\u6811\u672c\u6765\u5c31\u662f\u7a7a\u7684*/\n        T = malloc( sizeof( struct TreeNode ) ); \n    else { \n            T-&gt;Element = X; \n            T-&gt;Left = T-&gt;Right = NULL; } \n        }  \n    else  /* If there is a tree */\n    if ( X &lt; T-&gt;Element ) \n       T-&gt;Left = Insert( X, T-&gt;Left ); \n    else \n       if ( X &gt; T-&gt;Element ) \n          T-&gt;Right = Insert( X, T-&gt;Right ); \n       /* Else X is in the tree already; we'll do nothing */ \n    return  T;   /* Do not forget this line!! */ \n}\n</code></pre>"},{"location":"FDS/chap_4_%E6%A0%91/#_11","title":"\u5220\u9664","text":"<pre><code>SearchTree  Delete( ElementType X, SearchTree T ) \n{    Position  TmpCell; \n      if ( T == NULL )   Error( \"Element not found\" ); \n      else  if ( X &lt; T-&gt;Element )  /* Go left */ \n        T-&gt;Left = Delete( X, T-&gt;Left ); \n               else  if ( X &gt; T-&gt;Element )  /* Go right */ \n               T-&gt;Right = Delete( X, T-&gt;Right ); /*\u5230\u8fd9\u8fb9\u4e3a\u6b62\u90fd\u662f\u5728\u627e\u88ab\u5220\u7684\u7ed3\u70b9*/\n             else  /* \u627e\u5230\u4e86\u88ab\u5220\u7684\u7ed3\u70b9 */ \n               if ( T-&gt;Left &amp;&amp; T-&gt;Right ) \n               {  /* \u4e24\u4e2a\u5b69\u5b50\u7684\u60c5\u51b5\uff0c\u628a\u7ed3\u70b9\u66ff\u6362\u6210\u53f3\u8fb9\u6700\u5c0f\u7684 */ \n                   TmpCell = FindMin( T-&gt;Right ); \n                   T-&gt;Element = TmpCell-&gt;Element; \n                   T-&gt;Right = Delete( T-&gt;Element, T-&gt;Right ); \n                   /*\u8fd9\u8fb9\u9700\u8981\u628a\u627e\u5230\u7684\u53f3\u8282\u70b9\u7ed9\u5220\u4e86\uff0c\u4e2a\u4eba\u89c9\u5f97\u76f4\u63a5\u627e\u7684\u65f6\u5019\u5c31\u5220\u4e86\u4f1a\u66f4\u597d\u4e00\u70b9*/\n               } /* End if */\n               else \n               {  /* \u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u6216\u6ca1\u6709\u5b69\u5b50 */ \n                   TmpCell = T; \n                   if ( T-&gt;Left == NULL ) /*\u5de6\u8fb9\u5982\u679c\u662f\u7a7a\u7684\uff0c\u5c31\u8ba9\u53f3\u8fb9\u7ed3\u70b9\u4ee3\u66ff*/\n                        T = T-&gt;Right; \n                   else  if ( T-&gt;Right == NULL )  /*\u53f3\u8fb9\u7ed3\u70b9\u662f\u7a7a\u7684\uff0c\u5c31\u8ba9\u5de6\u8fb9\u7ed3\u70b9\u4ee3\u66ff*/\n                        T = T-&gt;Left; \n                   free( TmpCell );  \n               }  /* \u8fd9\u68371\u4e2a\u548c0\u4e2a\u5b69\u5b50\u90fd\u6ca1\u6709\u95ee\u9898*/\n      return  T; \n}\n</code></pre>"},{"location":"FDS/chap_5_%E5%93%88%E5%B8%8C/","title":"Chap 5 \u54c8\u5e0c","text":""},{"location":"FDS/chap_5_%E5%93%88%E5%B8%8C/#general-idea","title":"general idea","text":""},{"location":"FDS/chap_5_%E5%93%88%E5%B8%8C/#hash-function","title":"hash function","text":""},{"location":"FDS/chap_5_%E5%93%88%E5%B8%8C/#separate-chaining","title":"separate chaining","text":""},{"location":"FDS/chap_5_%E5%93%88%E5%B8%8C/#open-addressing","title":"open addressing","text":""},{"location":"FDS/chap_6_%E5%A0%86/","title":"Chap 6 \u5806","text":"<p>\u5806\u7684\u5b9a\u4e49\uff1a \u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\u3001\u6709\u5806\u5e8f\u6027\uff08\u53ef\u4ee5\u5206\u4e3a\u5927\u6839\u5806\u3001\u5c0f\u6839\u5806\uff09</p> <p>\u4e00\u4e2a\u9ad8\u5ea6\u4e3ah\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570n\u5728\\(2^h \\text{\u548c}2^{h+1}\\)\u4e4b\u95f4</p> 0 1 2 3 4 5 A B C D E <p>\u3010lemma\u3011 $$ index\\ of\\ parent(i)= \\begin{cases} \\lfloor i/2 \\rfloor,&amp;if\\ i&gt;1 \\ None,&amp;if\\ i=1 \\end{cases} $$ $$ index\\ of\\ lchild(i)= \\begin{cases} 2i,&amp;if\\ 2i\\leq n \\ None,&amp;if\\ 2i \\gt n \\end{cases} $$</p> \\[ index\\ of\\ rchild(i)= \\begin{cases} 2i+1,&amp;if\\ 2i+1\\leq n\\\\ None,&amp;if\\ 2i+1 \\gt n \\end{cases} \\] <p>\u5806\u7684\u57fa\u672c\u64cd\u4f5c\uff1a \u4e0a\u6ee4\u3001\u4e0b\u6ee4\uff08\u6839\u8282\u70b9\u5411\u4e0b\u52a8\uff09</p>"},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/","title":"Chap 7 \u6392\u5e8f","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#preliminaries","title":"preliminaries","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#insertion-sort","title":"insertion sort","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#a-lower-bound-for-simple-sorting-algorithms","title":"A lower bound for simple sorting algorithms","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#shellsort","title":"Shellsort","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#heapsort","title":"Heapsort","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#mergesort","title":"Mergesort","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#quicksort","title":"Quicksort","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#tablesort","title":"TableSort","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#_1","title":"Chap 7 \u6392\u5e8f","text":""},{"location":"FDS/chap_7_%E6%8E%92%E5%BA%8F/#bucketsort-and-radixsort","title":"Bucketsort and Radixsort","text":""},{"location":"FDS/chap_9_%E5%9B%BE/","title":"Chap 9 \u56fe","text":"<p>\u5e38\u8003\u8003\u70b9\uff1a </p> <p>\u5bf9\u4e8en\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u82e5\u8fde\u901a\uff0c\u6700\u5c11\u6709<code>n-1</code>\u6761\u8fb9\uff0c\u82e5\u4e0d\u8fde\u901a\uff0c\u6700\u591aC(n-1\uff0c2)\u6761\u8fb9</p> <p>\u5bf9\u4e8en\u4e2a\u9876\u70b9\u7684\u5f3a\u8fde\u901a\u56fe\uff0c\u6700\u5c11\u6709n\u6761\u8fb9\uff08\u5f62\u6210\u56de\u8def\uff09</p> <p>\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\uff1a \u4ecev\u5230w\u548c\u4ecew\u5230v\u4e4b\u95f4\u90fd\u6709\u8def\u5f84\uff0c\u5219\u79f0\u8fd9\u4e24\u4e2a\u9876\u70b9\u5f3a\u8fde\u901a   </p> <p>\u5f3a\u8fde\u901a\u56fe\uff1a\u4efb\u610f\u4e00\u5bf9\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684</p> <p>\u751f\u6210\u6811\uff1a \u662f\u5305\u542b\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u4e00\u4e2a\u6781\u5c0f\u8fde\u901a\u5b50\u56fe</p>"},{"location":"FDS/chap_9_%E5%9B%BE/#_1","title":"\u56fe\u7684\u5b58\u50a8","text":""},{"location":"FDS/chap_9_%E5%9B%BE/#on2","title":"\u90bb\u63a5\u77e9\u9635\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\\(O(n^2)\\)\uff09","text":"<pre><code>#define max 100//\u9876\u70b9\u6570\u76ee\u6700\u5927\u503c\ntypedef struct{\n    char vex[max];\n    int edge[max][max];\n    int vexnum,arcnum;\n}MGraph;\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u6cd5\u5b58\u50a8\u5e26\u6743\u56fe\uff0c\u5c061\u6539\u4e3a\u6743\u91cd</p>"},{"location":"FDS/chap_9_%E5%9B%BE/#_2","title":"\u90bb\u63a5\u8868\uff08\u987a\u5e8f+\u94fe\u5f0f\u5b58\u50a8\uff09","text":"<pre><code>//\u8fb9\ntypedef struct ArcNode{\n    int adjvex;//\u6307\u5411\u54ea\u4e2a\u8282\u70b9\n    struct ArcNode* next;\n}ArcNode;\n//\u9876\u70b9\ntypedef struct VNode{\n    VertexType data;\n    ArcNode* first;\n}VNode,AdjList[max];\n//\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u7684\u56fe\ntypedef struct{\n    Adjlist vertices;\n    int vexnum,arcnum;\n}ALGraph;\n</code></pre>"},{"location":"FDS/chap_9_%E5%9B%BE/#_3","title":"\u62d3\u6251\u6392\u5e8f","text":"<pre><code>void Toposort(Graph G){\n\n}\n</code></pre>"},{"location":"MATH/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/","title":"\u62bd\u8c61\u4ee3\u6570","text":"<p>25-26\u79cb\u51ac,\u77f3\u53cb\u665f\u8001\u5e08</p>"},{"location":"MATH/%E6%A6%82%E7%8E%87%E8%AE%BA/","title":"\u6982\u7387\u8bba","text":"<p>25-26\u79cb\u51ac \u5f20\u7acb\u65b0\u8001\u5e08</p>"}]}